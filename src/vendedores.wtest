import vendedores.*
import centrosDeDistribucion.*

		const buenosAires = new Provincia(poblacion = 10000000)
		const entreRios = new Provincia(poblacion = 1500000)
		const misiones = new Provincia(poblacion = 50000)
		const santaCruz = new Provincia(poblacion = 100000)
		const Caseros = new Ciudad(provincia = buenosAires)
		const Concordia = new Ciudad(provincia = entreRios)
		const SanMartin = new Ciudad(provincia = buenosAires)
		const Posadas = new Ciudad(provincia = misiones)
		const Calafate = new Ciudad(provincia = santaCruz)
		
		const telecom = new CentroDistribucion(ciudad = Caseros)
		const LopezyLopez = new CentroDistribucion(ciudad = Posadas)
		
		const sebas = new Fijo(ciudad = Caseros)
		const martin = new Fijo(ciudad = Caseros)
		const jorge = new Viajante()
		const agus = new Fijo(ciudad = Caseros)
		const ines = new ComercioCorresponsal()
		
		const unoC = new Certificacion(puntos = 20,esDeProducto = true)
		const dosC = new Certificacion(puntos = 10)
		const tresC = new Certificacion(puntos = 10)
		const cuatroC = new Certificacion(puntos = 50,esDeProducto = true)
		const cincoC = new Certificacion(puntos = 30,esDeProducto = true)
	
		const unoCD = new CertificacionCentro(puntos = 50)
		
		const monte = new ClienteInseguro()
		const pablo = new ClienteDetallista()
		const monica = new ClienteHumanista()
		
describe "test de vendedores"{
		
	test "Prueba vendedor Fijo, con certificados, ES VERSATIL"{
		assert.equals(true,sebas.puedeTrabajarEn(Caseros))
		
		sebas.agregarCertificacion(unoC)
		sebas.agregarCertificacion(dosC)
		sebas.agregarCertificacion(dosC)
		sebas.agregarCertificacion(cuatroC)
		
		assert.equals(true,sebas.esVersatil())
		assert.equals(true,sebas.esFirme())
		assert.equals(false,sebas.esInfluyente())
	}
	
	test "Prueba vendedor Fijo, con certificados, NO ES VERSATIL"{
		assert.equals(true,sebas.puedeTrabajarEn(Caseros))
		
		sebas.agregarCertificacion(unoC)
		
		assert.equals(false,sebas.esVersatil())
		assert.equals(false,sebas.esFirme())
		assert.equals(false,sebas.esInfluyente())
	}
	
	test "Prueba Vendedor Viajante, siendo Influyente"{
		jorge.agregarProvincia(entreRios)
		jorge.agregarProvincia(buenosAires)
		
		assert.equals(true,jorge.puedeTrabajarEn(Concordia))
		assert.equals(false,jorge.puedeTrabajarEn(Posadas))
		assert.equals(true,jorge.esInfluyente())
	}
	
	test "Prueba Vendedor Viajante,NO siendo Influyente"{
		jorge.agregarProvincia(entreRios)
		
		assert.equals(false,jorge.esInfluyente())
	}
	
	test "Prueba Vendedor ComercioCorresponsal"{
		ines.agregarCiudad(Caseros)
		ines.agregarCiudad(Concordia)
		ines.agregarCiudad(SanMartin)
		
		assert.equals(false,ines.esInfluyente())
		assert.equals(true,ines.puedeTrabajarEn(Caseros))
		assert.equals(false,ines.estaEnMuchasProvincias())
	}
	
	test "Prueba Vendedor ComercioCorresponsal, Influyente"{
		ines.agregarCiudad(Caseros)
		ines.agregarCiudad(Concordia)
		ines.agregarCiudad(SanMartin)
		ines.agregarCiudad(Calafate)
		
		assert.equals(true,ines.esInfluyente())
		assert.equals(true,ines.puedeTrabajarEn(Caseros))
		assert.equals(true,ines.estaEnMuchasProvincias())
	}
// No se agregan certificaciones a los vendedores, ya que al haber cumplido en un vendedor,
// en el resto, va a ser igual, ya que lo comparte por las herencias.
}


describe "test de Centro de Distribucion"{

	test "Ciudad del Centro de Distribucion"{
		assert.equals(Caseros,telecom.ciudad())
	}
	
	 test "Prueba de Vendedores con Centro de Distribucion, VENDEDOR ESTRELLA"{
		jorge.agregarProvincia(buenosAires)
		
		sebas.agregarCertificacion(unoC)
		sebas.agregarCertificacion(dosC)
		jorge.agregarCertificacion(unoC)
		jorge.agregarCertificacion(dosC)
		martin.agregarCertificacion(unoC)
		martin.agregarCertificacion(unoC)
		martin.agregarCertificacion(unoC)
		
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(martin)
		telecom.agregarVendedor(agus)
		
		assert.equals(martin,telecom.vendedorEstrella())
		assert.equals(true,telecom.cubrirCiudad(Caseros))
	}	
	
	test "Centro de Distribucion, Cubre una Ciudad"{
		sebas.agregarCertificacion(unoC)
		sebas.agregarCertificacion(dosC)
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(unoC)
		jorge.agregarCertificacion(dosC)
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		
		assert.equals([sebas,jorge],telecom.vendedoresGenericos())
	}

	test "Centro de Distribucion NO es Robusto "{
		sebas.agregarCertificacion(unoC)
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(unoC)
		ines.agregarCertificacion(tresC)
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(ines)
		
		assert.equals(false,telecom.esRobusto())
	}
	
	test "Centro de Distribucion ES Robusto "{
		sebas.agregarCertificacion(unoC)
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(unoC)
		jorge.agregarCertificacion(unoC)
		ines.agregarCertificacion(cuatroC)
		martin.agregarCertificacion(cincoC)
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(ines)
		telecom.agregarVendedor(martin)
		
		assert.equals(true,telecom.esRobusto())
	}
	
	test "Centro de Distribucion, VENDEDORES GENERICOS"{
		sebas.agregarCertificacion(unoC)
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(dosC)
		ines.agregarCertificacion(cuatroC)
		martin.agregarCertificacion(dosC)
		
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(ines)
		telecom.agregarVendedor(martin)
		
		assert.equals([jorge,martin],telecom.vendedoresGenericos())
	}
	
//	test "Centro de Distribucion REPARTIR CERTIFICACION"{
//		sebas.agregarCertificacion(unoC)
//		jorge.agregarProvincia(buenosAires)
//		jorge.agregarCertificacion(dosC)
//		ines.agregarCertificacion(cuatroC)
//		martin.agregarCertificacion(dosC)
//		
//		telecom.agregarVendedor(sebas)
//		telecom.agregarVendedor(jorge)
//		telecom.agregarVendedor(ines)
//		telecom.agregarVendedor(martin)
//		
//		telecom.repartirCertificacion(unoCD)
//	}

	test "Centro de Distribucion, VENDEDOR CON AFINIDAD"{
		sebas.agregarCertificacion(unoC)
		
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(dosC)
		
		ines.agregarCertificacion(cuatroC)
		ines.agregarCiudad(Posadas)
		
		martin.agregarCertificacion(dosC)
		
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(ines)
		telecom.agregarVendedor(martin)
		
		
		assert.equals(false,ines.tieneAfinidadA(telecom))
		assert.equals(true,jorge.tieneAfinidadA(telecom))
		assert.equals(true,sebas.tieneAfinidadA(telecom))
		assert.equals(true,martin.tieneAfinidadA(telecom))
	}
	
	test "Centro de Distribucion, VENDEDOR CANDIDATO"{
		sebas.agregarCertificacion(cuatroC)
		sebas.agregarCertificacion(dosC)
		sebas.agregarCertificacion(unoC)
		
		jorge.agregarProvincia(buenosAires)
		jorge.agregarCertificacion(dosC)
		jorge.agregarCertificacion(tresC)		
		jorge.agregarCertificacion(unoC)

		ines.agregarCertificacion(cuatroC)
		ines.agregarCiudad(Posadas)
		
		martin.agregarCertificacion(dosC)
		
		telecom.agregarVendedor(sebas)
		telecom.agregarVendedor(jorge)
		telecom.agregarVendedor(ines)
		telecom.agregarVendedor(martin)
		
		assert.equals([sebas,jorge],telecom.vendedorCandidato())
	}
}

describe "Atender Clientes"{
		test "Cliente INSEGURO"{
			sebas.agregarCertificacion(unoC)
			sebas.agregarCertificacion(dosC)
			sebas.agregarCertificacion(dosC)
			sebas.agregarCertificacion(cuatroC)
			martin.agregarCertificacion(dosC)
			
			assert.equals(false,monte.puedeSerAtendidoPor(martin))
			assert.equals(true,monte.puedeSerAtendidoPor(sebas))
		}
		
		test "Cliente DETALLISTA"{
			jorge.agregarProvincia(entreRios)
			jorge.agregarCertificacion(unoC)
			jorge.agregarCertificacion(unoC)
			jorge.agregarCertificacion(unoC)
			sebas.agregarCertificacion(unoC)
			
			assert.equals(false,pablo.puedeSerAtendidoPor(sebas))
			assert.equals(true,pablo.puedeSerAtendidoPor(jorge))
		}
		
		test "Cliente HUMANISTA"{
			assert.equals(true,monica.puedeSerAtendidoPor(sebas))
			assert.equals(true,monica.puedeSerAtendidoPor(jorge))			
		}
		
}